syntax = "proto3";
package ticket;

option go_package = "api/ts";

enum Statuses {
  WAITING_OCR = 0;
  WAITING_VALIDATION = 1;
  WAITING_APPROVAL = 2;
  CLOSED = 3;
  REJECTED = 4;
}

message Item {
  string product = 1;
  string description = 2;
  float price = 3;
  float amount = 4;
  string unit = 5;
  uint32 overprice = 6;
}

message Ticket {
  string id = 1;
  string userId = 2; // uuid v7
  string imageUrl = 3;
  string shopName = 4;
  string shopAddress = 5;
  Statuses status = 6;
  int64 createdAt = 7;
  optional int64 updatedAt = 8;
  optional string reason = 9;
  optional Item item = 10;
}
message CreateRequest {
  string userId = 1; // uuid v7
  string imageUrl = 2;
  string shopName = 3;
  string shopAddr = 4;
}
message CreateResponse {
  string ticketId = 1;
}
message CloseTicketRequest {
  string ticketId = 1;
}
message Empty {}
message Bounds {
  uint64 limit = 1;
  uint64 offset = 2;
}
message TimeRange {
  optional int64 from = 1;
  optional int64 to = 2;
}
message Filter {
  optional Statuses status = 1;
  optional TimeRange timeRange = 2;
  optional string userId = 3;
}
message ListRequest {
  Bounds bounds = 1;
  optional Filter filter = 2;
}
message ListResponse {
  repeated Ticket tickets = 1;
  int64 count = 2;
}
message FindByIdRequest {
  string ticketId = 1;
}

message UserSummary {
  string userId = 1;
  int64 count = 2;
}
message StatusSummary {
  string statusId = 1;
  int64 count = 2;
}
message ShopSummary {
  string shopId = 1;
  int64 count = 2;
}

service TicketService {
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc List(ListRequest) returns (ListResponse);
  rpc FindById(FindByIdRequest) returns (Ticket);
  rpc CloseTicket(CloseTicketRequest) returns (Empty);

  rpc GetUserSummary(Empty) returns (stream UserSummary);
  rpc GetStatusSummary(Empty) returns (stream StatusSummary);
  rpc GetShopSummary(Empty) returns (stream ShopSummary);
}